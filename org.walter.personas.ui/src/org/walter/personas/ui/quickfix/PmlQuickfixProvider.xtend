/*
 * generated by Xtext
 */
package org.walter.personas.ui.quickfix

import org.eclipse.xtext.EcoreUtil2
import org.eclipse.xtext.Keyword
import org.eclipse.xtext.diagnostics.Diagnostic
import org.eclipse.xtext.nodemodel.impl.HiddenLeafNode
import org.eclipse.xtext.nodemodel.impl.LeafNode
import org.eclipse.xtext.nodemodel.util.NodeModelUtils
import org.eclipse.xtext.ui.editor.quickfix.Fix
import org.eclipse.xtext.ui.editor.quickfix.IssueResolutionAcceptor
import org.eclipse.xtext.validation.Issue
import com.google.inject.Inject
import org.walter.commons.linking.CustomLinkingDiagnosticMessageProvider
import org.walter.personas.validation.PmlValidator
import org.walter.personas.pml.Persona
import org.walter.personas.pml.PmlFactory
import org.walter.personas.pml.PersonaSex
import org.walter.personas.pml.PmlRoot
import org.walter.personas.pml.PmlPackage
import org.walter.personas.pml.FullName
import org.walter.personas.pml.Age
import org.walter.personas.pml.Description
import org.walter.personas.pml.Sex
import org.walter.personas.pml.CustomProperty
import org.walter.personas.pml.AttributeType

/**
 * Custom quickfixes.
 *
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#quick-fixes
 */
class PmlQuickfixProvider extends org.eclipse.xtext.ui.editor.quickfix.DefaultQuickfixProvider {

	@Inject
	CustomLinkingDiagnosticMessageProvider customLinkingDiagnosticMessageProvider

	@Fix(PmlValidator.UNRESOLVED_TEMPLATE)
	def createImport(Issue issue, IssueResolutionAcceptor acceptor) {
		val linkText = issue.data.get(0)
		issue.addImportTemplateFix(acceptor, linkText)
		issue.addLocalTemplateFix(acceptor, linkText)
	}

	@Fix(PmlValidator.MISSING_REQUIRED_DEFAULT)
	def addRequiredDefault(Issue issue, IssueResolutionAcceptor acceptor) {
		val propName = issue.data.get(0)
		
		acceptor.accept(issue, 'Add missing attribute \'' + propName + '\'',
			'Add missing attribute \'' + propName + '\'', null) [ element, context |
				if(element instanceof Persona) {
					val persona = element as Persona
					val template = persona.template
					
					if(template != null) {
						switch(propName) {
							case 'full name': {
								val property = PmlFactory.eINSTANCE.createFullName
								property.value = 'John Doe'
								property.comment = '[FIX ME!]'
								persona.rgproperty.add(property)
							}
							case 'sex': {
								val property = PmlFactory.eINSTANCE.createSex
								property.value = PersonaSex.MALE
								property.comment = '[FIX ME!]'
								persona.rgproperty.add(property)
							}
							case 'age': {
								val property = PmlFactory.eINSTANCE.createAge
								property.value = 0
								property.comment = '[FIX ME!]'
								persona.rgproperty.add(property)
							}
							case 'description': {
								val property = PmlFactory.eINSTANCE.createDescription
								property.value = 'description'
								property.comment = '[FIX ME!]'
								persona.rgproperty.add(property)
							}
						}
					}
				}	
			]
	}

	@Fix(PmlValidator.MISSING_REQUIRED_CUSTOM)
	def addRequiredCustom(Issue issue, IssueResolutionAcceptor acceptor) {
		val propName = issue.data.get(0)
		val propValue = issue.data.get(1)

		acceptor.accept(issue, 'Add missing attribute \'' + propName + '\'',
			'Add missing attribute \'' + propName + '\'', null) [ element, context |
			if (element instanceof Persona) {
				val persona = element as Persona
				val template = persona.template
				if (template != null) {

					val property = PmlFactory.eINSTANCE.createCustomProperty
					val ca = template.customs.findFirst[it.caName.name.equals(propName)]
					property.setCustomAttributeRef(ca.caName)
					if (!ca.rgenumValue.empty) {
						property.setEnumValue(ca.rgenumValue?.get(0))
					} else {
						switch (ca.attributeType.getName()) {
							case "NUMBER": property.setIntValue(Integer.parseInt(propValue))
							case "TEXT": property.setStringValue(propValue)
						}

					}

					persona.rgproperty.add(property)
				}

			}
		]
	}

	def addImportTemplateFix(Issue issue, IssueResolutionAcceptor acceptor, String linkText) {
		if (linkText != null) {

			acceptor.accept(issue, 'Add import for \'' + linkText + '\'', 'Add import for \'' + linkText + '\'', null) [ element, context |
				if (element instanceof Persona) {

					val root = EcoreUtil2.getContainerOfType(element, PmlRoot)

					val ^import = PmlFactory.eINSTANCE.createImport
					^import.setImportedNamespace(linkText)
					root.rgimport.add(^import)
				}
			]

		}
	}

	@Fix(Diagnostic.LINKING_DIAGNOSTIC)
	def createTemplate(Issue issue, IssueResolutionAcceptor acceptor) {
		val linkText = customLinkingDiagnosticMessageProvider.getLinkText(issue,
			PmlPackage.eINSTANCE.template)

		issue.addImportTemplateFix(acceptor, linkText)
		issue.addLocalTemplateFix(acceptor, linkText)

	}

	def void addLocalTemplateFix(Issue issue, IssueResolutionAcceptor acceptor, String linkText) {
		if (linkText != null) {

			acceptor.accept(issue, 'Create local template \'' + linkText + '\'',
				'Create local template \'' + linkText + '\'', null) [ element, context |
				if (element instanceof Persona) {

					val root = EcoreUtil2.getContainerOfType(element, PmlRoot)

					val template = PmlFactory.eINSTANCE.createTemplate
					template.name = linkText
					val persona = element as Persona
					persona.rgproperty.forEach [
						switch it {
							FullName: {
								template.defaults.add("full name")
							}
							Age: {
								template.defaults.add("age")
							}
							Description: {
								template.defaults.add("description")
							}
							Sex: {
								template.defaults.add("sex")
							}
							CustomProperty: {

								val nodeForCARef = NodeModelUtils.findActualNodeFor(it)
								val nodeCandidates = nodeForCARef.asTreeIterable.filter(LeafNode).filter[
									!(it instanceof HiddenLeafNode) && !(it.grammarElement instanceof Keyword)]

								if (nodeCandidates.length <= 2) {

									val ca = PmlFactory.eINSTANCE.createCustomAttribute
									val caName = PmlFactory.eINSTANCE.createCustomAttributeName

									caName.name = nodeCandidates.get(0).text
									ca.caName = caName

									if (it.enumValue != null) {
										if (nodeCandidates.get(1) != null) {
											val ev = PmlFactory.eINSTANCE.createEnumValue
											ev.name = nodeCandidates.get(1).text
											ca.rgenumValue.add(ev)
										}
									} else if (it.stringValue != null) {
										ca.attributeType = AttributeType.TEXT
									} else {
										ca.attributeType = AttributeType.NUMBER
									}
									ca.required = '!'
									template.customs.add(ca)
								}
							}
						}
					]

					root.rgtemplate.add(template)
				}
			]
		}
	}

}
