/*
 * generated by Xtext
 */
package org.walter.personas.ui.contentassist

import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.Assignment
import org.eclipse.xtext.CrossReference
import org.eclipse.xtext.Keyword
import org.eclipse.xtext.RuleCall
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor
import org.walter.personas.pml.CustomAttribute
import org.walter.personas.pml.CustomProperty
import org.walter.personas.pml.DefaultProperty
import org.walter.personas.pml.Persona
import org.walter.personas.pml.PmlPackage
import org.walter.personas.pml.Template
import static extension org.walter.personas.util.U.getKeywordValueFor

/**
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#content-assist
 * on how to customize the content assistant.
 */
class PmlProposalProvider extends AbstractPmlProposalProvider {
	
	override completeCustomProperty_EnumValue(EObject model, Assignment assignment, ContentAssistContext context,
		ICompletionProposalAcceptor acceptor) {
		val cp = model as CustomProperty
		val ca = cp.customAttributeRef.eContainer as CustomAttribute
		if (!ca?.rgenumValue.empty)
			super.completeCustomProperty_EnumValue(model, assignment, context, acceptor)
	}

	override completeCustomProperty_CustomAttributeRef(EObject model, Assignment assignment,
		ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		lookupCrossReference((assignment.terminal as CrossReference), context, acceptor) [ ieod |
			!(model as Persona).rgproperty.filter(CustomProperty).exists [ cp |
				ieod.EObjectOrProxy == cp.customAttributeRef
			]
		]
	}

	override complete_INT(EObject model, RuleCall ruleCall, ContentAssistContext context,
		ICompletionProposalAcceptor acceptor) {
		if (model instanceof CustomProperty) {
			val cp = model as CustomProperty
			val ca = cp.customAttributeRef.eContainer as CustomAttribute
			if (!ca.rgenumValue.empty || !ca.attributeType.getName().equals("NUMBER"))
				return
		}

		super.complete_INT(model, ruleCall, context, acceptor)
	}

	override complete_STRING(EObject model, RuleCall ruleCall, ContentAssistContext context,
		ICompletionProposalAcceptor acceptor) {
		if (model instanceof CustomProperty) {
			val cp = model as CustomProperty
			val ca = cp.customAttributeRef.eContainer as CustomAttribute
			if (!ca.rgenumValue.empty || !ca.attributeType.getName().equals("TEXT"))
				return
		}

		super.complete_STRING(model, ruleCall, context, acceptor)
	}

	override completeImport_ImportedNamespace(EObject model, Assignment assignment, ContentAssistContext context,
		ICompletionProposalAcceptor acceptor) {
		val scope = this.scopeProvider.getScope(context.rootModel, PmlPackage.Literals.PERSONA__TEMPLATE)
		scope.allElements.filter[ieod|ieod.EObjectOrProxy instanceof Template].forEach [ element |
			acceptor.accept(createCompletionProposal(element.qualifiedName.toString, context))
		]
	}

	override completeKeyword(Keyword keyword, ContentAssistContext contentAssistContext,
		ICompletionProposalAcceptor acceptor) {
		val model = contentAssistContext.currentModel
		switch (model) {
			Persona: {
				if(filter(keyword, model)) {
					return
				}
//				if (model.template != null && filter(keyword, model, model.template))
//					return
//				else if(model.template == null && filter(keyword, model))
//					return
			}
		}

		super.completeKeyword(keyword, contentAssistContext, acceptor)

	}

	def private filter(Keyword keyword, Persona persona) {
		if (persona == null)
			return false

		val filterList = newArrayList
		
		// add already used defaults to filterList
		persona.rgproperty.filter(DefaultProperty).forEach [
			filterList.add(it.eClass.keywordValueFor)
		]

		if (filterList.contains(keyword.value)) {
			return true
		}
		return false
	}
}
